{"version":3,"sources":["webpack://PathToRegexp/webpack/universalModuleDefinition","webpack://PathToRegexp/webpack/bootstrap","webpack://PathToRegexp/./talend-umds/path-to-regexp/4.0.4/node_modules/path-to-regexp/dist/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","balanced","open","close","str","index","count","length","parse","options","_a","_b","tokens","defaultDelimiter","delimiter","whitelist","undefined","path","isEscaped","prefix","pattern","code","charCodeAt","end","slice","TypeError","test","validPattern","replace","char","indexOf","push","repeat","optional","escapeString","tokensToFunction","reFlags","flags","encode","encodeURIComponent","validate","matches","map","token","RegExp","data","Array","isArray","j","segment","typeOfMessage","String","regexpToFunction","re","keys","decode","x","pathname","exec","params","_loop_1","split","sensitive","tokensToRegexp","strict","start","_c","endsWith","concat","join","route","_i","tokens_1","capture","endToken","isEndDelimited","pathToRegexp","groups","source","match","regexpToRegexp","paths","parts","arrayToRegexp","stringToRegexp","normalizePathname","decodeURIComponent","compile"],"mappings":"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","file":"PathToRegexp.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PathToRegexp\"] = factory();\n\telse\n\t\troot[\"PathToRegexp\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = \"/\";\n/**\n * Normalize a pathname for matching, replaces multiple slashes with a single\n * slash and normalizes unicode characters to \"NFC\". When using this method,\n * `decode` should be an identity function so you don't decode strings twice.\n */\nfunction normalizePathname(pathname, whitelist) {\n    if (whitelist === void 0) { whitelist = \"%/-.\"; }\n    return pathname\n        .replace(/\\/+/g, \"/\")\n        .replace(/(?:%[ef][0-9a-f](?:%[0-9a-f]{2}){2}|%[cd][0-9a-f]%[0-9a-f]{2}|%[0-9a-f]{2})/gi, function (m) {\n        var char = decodeURIComponent(m);\n        if (whitelist.indexOf(char) > -1)\n            return m;\n        return char;\n    });\n}\nexports.normalizePathname = normalizePathname;\n/**\n * Balanced bracket helper function.\n */\nfunction balanced(open, close, str, index) {\n    var count = 0;\n    var i = index;\n    while (i < str.length) {\n        if (str[i] === \"\\\\\") {\n            i += 2;\n            continue;\n        }\n        if (str[i] === close) {\n            count--;\n            if (count === 0)\n                return i + 1;\n        }\n        if (str[i] === open) {\n            count++;\n        }\n        i++;\n    }\n    return -1;\n}\n/**\n * Parse a string for the raw tokens.\n */\nfunction parse(str, options) {\n    if (options === void 0) { options = {}; }\n    var _a, _b;\n    var tokens = [];\n    var defaultDelimiter = (_a = options.delimiter, (_a !== null && _a !== void 0 ? _a : DEFAULT_DELIMITER));\n    var whitelist = (_b = options.whitelist, (_b !== null && _b !== void 0 ? _b : undefined));\n    var i = 0;\n    var key = 0;\n    var path = \"\";\n    var isEscaped = false;\n    // tslint:disable-next-line\n    while (i < str.length) {\n        var prefix = \"\";\n        var name = \"\";\n        var pattern = \"\";\n        // Ignore escaped sequences.\n        if (str[i] === \"\\\\\") {\n            i++;\n            path += str[i++];\n            isEscaped = true;\n            continue;\n        }\n        if (str[i] === \":\") {\n            while (++i < str.length) {\n                var code = str.charCodeAt(i);\n                if (\n                // `0-9`\n                (code >= 48 && code <= 57) ||\n                    // `A-Z`\n                    (code >= 65 && code <= 90) ||\n                    // `a-z`\n                    (code >= 97 && code <= 122) ||\n                    // `_`\n                    code === 95) {\n                    name += str[i];\n                    continue;\n                }\n                break;\n            }\n            // False positive on param name.\n            if (!name)\n                i--;\n        }\n        if (str[i] === \"(\") {\n            var end = balanced(\"(\", \")\", str, i);\n            // False positive on matching brackets.\n            if (end > -1) {\n                pattern = str.slice(i + 1, end - 1);\n                i = end;\n                if (pattern[0] === \"?\") {\n                    throw new TypeError(\"Path pattern must be a capturing group\");\n                }\n                if (/\\((?=[^?])/.test(pattern)) {\n                    var validPattern = pattern.replace(/\\((?=[^?])/, \"(?:\");\n                    throw new TypeError(\"Capturing groups are not allowed in pattern, use a non-capturing group: (\" + validPattern + \")\");\n                }\n            }\n        }\n        // Add regular characters to the path string.\n        if (name === \"\" && pattern === \"\") {\n            path += str[i++];\n            isEscaped = false;\n            continue;\n        }\n        // Extract the final character from `path` for the prefix.\n        if (path.length && !isEscaped) {\n            var char = path[path.length - 1];\n            var matches = whitelist ? whitelist.indexOf(char) > -1 : true;\n            if (matches) {\n                prefix = char;\n                path = path.slice(0, -1);\n            }\n        }\n        // Push the current path onto the list of tokens.\n        if (path.length) {\n            tokens.push(path);\n            path = \"\";\n        }\n        var repeat = str[i] === \"+\" || str[i] === \"*\";\n        var optional = str[i] === \"?\" || str[i] === \"*\";\n        var delimiter = prefix || defaultDelimiter;\n        // Increment `i` past modifier token.\n        if (repeat || optional)\n            i++;\n        tokens.push({\n            name: name || key++,\n            prefix: prefix,\n            delimiter: delimiter,\n            optional: optional,\n            repeat: repeat,\n            pattern: pattern ||\n                \"[^\" + escapeString(delimiter === defaultDelimiter\n                    ? delimiter\n                    : delimiter + defaultDelimiter) + \"]+?\"\n        });\n    }\n    if (path.length)\n        tokens.push(path);\n    return tokens;\n}\nexports.parse = parse;\n/**\n * Compile a string to a template function for the path.\n */\nfunction compile(str, options) {\n    return tokensToFunction(parse(str, options), options);\n}\nexports.compile = compile;\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction(tokens, options) {\n    if (options === void 0) { options = {}; }\n    var reFlags = flags(options);\n    var _a = options.encode, encode = _a === void 0 ? encodeURIComponent : _a, _b = options.validate, validate = _b === void 0 ? true : _b;\n    // Compile all the tokens into regexps.\n    var matches = tokens.map(function (token) {\n        if (typeof token === \"object\") {\n            return new RegExp(\"^(?:\" + token.pattern + \")$\", reFlags);\n        }\n    });\n    return function (data) {\n        var path = \"\";\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (typeof token === \"string\") {\n                path += token;\n                continue;\n            }\n            var value = data ? data[token.name] : undefined;\n            if (Array.isArray(value)) {\n                if (!token.repeat) {\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not repeat, but got an array\");\n                }\n                if (value.length === 0) {\n                    if (token.optional)\n                        continue;\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not be empty\");\n                }\n                for (var j = 0; j < value.length; j++) {\n                    var segment = encode(value[j], token);\n                    if (validate && !matches[i].test(segment)) {\n                        throw new TypeError(\"Expected all \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n                    }\n                    path += (j === 0 ? token.prefix : token.delimiter) + segment;\n                }\n                continue;\n            }\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                var segment = encode(String(value), token);\n                if (validate && !matches[i].test(segment)) {\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n                }\n                path += token.prefix + segment;\n                continue;\n            }\n            if (token.optional)\n                continue;\n            var typeOfMessage = token.repeat ? \"an array\" : \"a string\";\n            throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to be \" + typeOfMessage);\n        }\n        return path;\n    };\n}\nexports.tokensToFunction = tokensToFunction;\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nfunction match(str, options) {\n    var keys = [];\n    var re = pathToRegexp(str, keys, options);\n    return regexpToFunction(re, keys, options);\n}\nexports.match = match;\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nfunction regexpToFunction(re, keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.decode, decode = _a === void 0 ? function (x) { return x; } : _a;\n    return function (pathname) {\n        var m = re.exec(pathname);\n        if (!m)\n            return false;\n        var path = m[0], index = m.index;\n        var params = Object.create(null);\n        var _loop_1 = function (i) {\n            // tslint:disable-next-line\n            if (m[i] === undefined)\n                return \"continue\";\n            var key = keys[i - 1];\n            if (key.repeat) {\n                params[key.name] = m[i].split(key.delimiter).map(function (value) {\n                    return decode(value, key);\n                });\n            }\n            else {\n                params[key.name] = decode(m[i], key);\n            }\n        };\n        for (var i = 1; i < m.length; i++) {\n            _loop_1(i);\n        }\n        return { path: path, index: index, params: params };\n    };\n}\nexports.regexpToFunction = regexpToFunction;\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str) {\n    return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options) {\n    return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path, keys) {\n    if (!keys)\n        return path;\n    // Use a negative lookahead to match only capturing groups.\n    var groups = path.source.match(/\\((?!\\?)/g);\n    if (groups) {\n        for (var i = 0; i < groups.length; i++) {\n            keys.push({\n                name: i,\n                prefix: \"\",\n                delimiter: \"\",\n                optional: false,\n                repeat: false,\n                pattern: \"\"\n            });\n        }\n    }\n    return path;\n}\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(paths, keys, options) {\n    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });\n    return new RegExp(\"(?:\" + parts.join(\"|\") + \")\", flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(path, keys, options) {\n    return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nfunction tokensToRegexp(tokens, keys, options) {\n    if (options === void 0) { options = {}; }\n    var strict = options.strict, _a = options.start, start = _a === void 0 ? true : _a, _b = options.end, end = _b === void 0 ? true : _b, _c = options.delimiter, delimiter = _c === void 0 ? DEFAULT_DELIMITER : _c;\n    var endsWith = (typeof options.endsWith === \"string\"\n        ? options.endsWith.split(\"\")\n        : options.endsWith || [])\n        .map(escapeString)\n        .concat(\"$\")\n        .join(\"|\");\n    var route = start ? \"^\" : \"\";\n    // Iterate over the tokens and create our regexp string.\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        if (typeof token === \"string\") {\n            route += escapeString(token);\n        }\n        else {\n            var capture = token.repeat\n                ? \"(?:\" + token.pattern + \")(?:\" + escapeString(token.delimiter) + \"(?:\" + token.pattern + \"))*\"\n                : token.pattern;\n            if (keys)\n                keys.push(token);\n            if (token.optional) {\n                if (!token.prefix) {\n                    route += \"(\" + capture + \")?\";\n                }\n                else {\n                    route += \"(?:\" + escapeString(token.prefix) + \"(\" + capture + \"))?\";\n                }\n            }\n            else {\n                route += escapeString(token.prefix) + \"(\" + capture + \")\";\n            }\n        }\n    }\n    if (end) {\n        if (!strict)\n            route += \"(?:\" + escapeString(delimiter) + \")?\";\n        route += endsWith === \"$\" ? \"$\" : \"(?=\" + endsWith + \")\";\n    }\n    else {\n        var endToken = tokens[tokens.length - 1];\n        var isEndDelimited = typeof endToken === \"string\"\n            ? endToken[endToken.length - 1] === delimiter\n            : // tslint:disable-next-line\n                endToken === undefined;\n        if (!strict) {\n            route += \"(?:\" + escapeString(delimiter) + \"(?=\" + endsWith + \"))?\";\n        }\n        if (!isEndDelimited) {\n            route += \"(?=\" + escapeString(delimiter) + \"|\" + endsWith + \")\";\n        }\n    }\n    return new RegExp(route, flags(options));\n}\nexports.tokensToRegexp = tokensToRegexp;\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nfunction pathToRegexp(path, keys, options) {\n    if (path instanceof RegExp) {\n        return regexpToRegexp(path, keys);\n    }\n    if (Array.isArray(path)) {\n        return arrayToRegexp(path, keys, options);\n    }\n    return stringToRegexp(path, keys, options);\n}\nexports.pathToRegexp = pathToRegexp;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}