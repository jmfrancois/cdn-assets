{"version":3,"sources":["webpack://DateFnsTimezone/webpack/universalModuleDefinition","webpack://DateFnsTimezone/webpack/bootstrap","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/parse/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/start_of_iso_week/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/is_date/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/get_iso_year/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns-timezone/dist/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://DateFnsTimezone/external \"TimezoneSupport\"","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/timezone-support/dist/parse-format.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/timezone-support/dist/lookup-convert.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/format/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/get_day_of_year/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/start_of_year/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/difference_in_calendar_days/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/start_of_day/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/get_iso_week/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/start_of_week/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/start_of_iso_year/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/is_valid/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/locale/en/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/locale/en/build_distance_in_words_locale/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/locale/en/build_format_locale/index.js","webpack://DateFnsTimezone/./umds/date-fns-timezone/0.1.4/node_modules/date-fns/locale/_lib/build_formatting_tokens_reg_exp/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getTimezoneOffsetInMilliseconds","isDate","parseTokenDateTimeDelimeter","parseTokenPlainTime","parseTokenYY","parseTokensYYY","parseTokenYYYY","parseTokensYYYYY","parseTokenMM","parseTokenDDD","parseTokenMMDD","parseTokenWww","parseTokenWwwD","parseTokenHH","parseTokenHHMM","parseTokenHHMMSS","parseTokenTimezone","parseTokenTimezoneZ","parseTokenTimezoneHH","parseTokenTimezoneHHMM","dayOfISOYear","isoYear","week","day","date","Date","setUTCFullYear","diff","getUTCDay","setUTCDate","getUTCDate","argument","dirtyOptions","getTime","additionalDigits","Number","dateStrings","dateString","timeString","array","split","test","token","exec","time","replace","timezone","splitDateString","parseYearResult","parseTokenYYY","parseTokenYYYYY","yearString","year","parseInt","restDateString","slice","length","centuryString","parseYear","month","dayOfYear","dayOfWeek","parseDate","offset","timestamp","hours","minutes","parseFloat","seconds","parseTime","timezoneString","absoluteOffset","parseTimezone","fullTime","fullTimeDate","fullTimeDateNextDay","setDate","getDate","offsetDiff","startOfWeek","dirtyDate","weekStartsOn","parse","startOfISOWeek","getFullYear","fourthOfJanuaryOfNextYear","setFullYear","setHours","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","_interopDefault","ex","timezoneSupport","parseFormat","lookupConvert","formatDate","padToTwoDigits","number","formatTimeZoneOffset","separator","sign","Math","floor","convertToLocalTime","options","timeZone","findTimeZone","getUTCOffset","getTimezoneOffset","convertToTimeZone","parseFromString","formatString","parseZonedTime","convertTimeToDate","parseFromTimeZone","undefined","unixTime","getUnixTime","formatToTimeZone","convertTimeZone","format","match","abbreviation","formatTimeZoneTokens","baseTimezoneOffset","setSeconds","formattingTokens","match1","match2","match1to2","matchOffset","parseTokenExpressions","parseTokenFunctions","parsers","addExpressionToken","regex","addParseToken","tokens","callback","input","_iterator","_isArray","Array","isArray","_i2","iterator","_ref","next","done","afternoon","_loop","factor","milliseconds","zone","parts","padToN","padWithZeros","formatTokenFunctions","formatters","addFormatToken","padded","addTimeZoneFormatToken","abs","parser","Error","_i","start","_token","indexOf","part","substr","_regex","_parser","_part","index","correctDayPeriod","makeParser","formatZonedTime","formatter","output","makeFormatter","charCodeToInt","charCode","unpackBase60","string","whole","fractional","multiplier","out","charCodeAt","_length","arrayToInt","mapIndices","source","indices","unpack","data","offsets","untils","round","Infinity","intToUntil","abbreviations","population","zones","names","links","instances","getUnixTimeFromUTC","_ref$seconds","_ref$milliseconds","UTC","getUTCTime","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getLocalTime","getMonth","getDay","getHours","getMinutes","getSeconds","getMilliseconds","getTransition","transitionIndex","findTransitionIndex","attachEpoch","populateTimeZones","zoneData","linkData","map","packed","reduce","result","_packed$split","listTimeZones","alias","_getTransition","getZonedTime","gotUnixTime","_getTransition2","epoch","setTimeZone","extract","useUTC","getDateTime","_time","_time$seconds","_time$milliseconds","utcDate","_getTransition3","_ref2","_ref2$seconds","_ref2$milliseconds","convertDateToTime","toTimeString","getDayOfYear","getISOWeek","getISOYear","isValid","enLocale","addLeadingZeros","ceil","String","formatTimezone","removeFormattingTokens","delimeter","absOffset","targetLength","toString","dirtyFormatStr","formatStr","locale","localeFormatters","formattingTokensRegExp","Function","buildFormatFn","formatFn","startOfYear","differenceInCalendarDays","cleanDate","startOfDay","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","startOfISOYear","fourthOfJanuary","isNaN","TypeError","buildDistanceInWordsLocale","buildFormatLocale","distanceInWords","distanceInWordsLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","localize","count","addSuffix","comparison","buildFormattingTokensRegExp","months3char","monthsFull","weekdays2char","weekdays3char","weekdaysFull","meridiemUppercase","meridiemLowercase","meridiemFull","forEach","formatterToken","rem100","ordinal","commonFormatterKeys","formatterKeys","push","concat","sort","reverse","RegExp","join"],"mappings":"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","file":"DateFnsTimezone.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DateFnsTimezone\"] = factory();\n\telse\n\t\troot[\"DateFnsTimezone\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","var getTimezoneOffsetInMilliseconds = require('../_lib/getTimezoneOffsetInMilliseconds/index.js')\nvar isDate = require('../is_date/index.js')\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar parseTokenDateTimeDelimeter = /[T ]/\nvar parseTokenPlainTime = /:/\n\n// year tokens\nvar parseTokenYY = /^(\\d{2})$/\nvar parseTokensYYY = [\n  /^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n]\n\nvar parseTokenYYYY = /^(\\d{4})/\nvar parseTokensYYYYY = [\n  /^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n]\n\n// date tokens\nvar parseTokenMM = /^-(\\d{2})$/\nvar parseTokenDDD = /^-?(\\d{3})$/\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\nvar parseTokenWww = /^-?W(\\d{2})$/\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n\n// time tokens\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n\n// timezone tokens\nvar parseTokenTimezone = /([Z+-].*)$/\nvar parseTokenTimezoneZ = /^(Z)$/\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\n\n/**\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} [options] - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parse('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Parse string '+02014101',\n * // if the additional number of digits in the extended year format is 1:\n * var result = parse('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction parse (argument, dirtyOptions) {\n  if (isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n\n  var options = dirtyOptions || {}\n  var additionalDigits = options.additionalDigits\n  if (additionalDigits == null) {\n    additionalDigits = DEFAULT_ADDITIONAL_DIGITS\n  } else {\n    additionalDigits = Number(additionalDigits)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone) * MILLISECONDS_IN_MINUTE\n    } else {\n      var fullTime = timestamp + time\n      var fullTimeDate = new Date(fullTime)\n\n      offset = getTimezoneOffsetInMilliseconds(fullTimeDate)\n\n      // Adjust time when it's coming from DST\n      var fullTimeDateNextDay = new Date(fullTime)\n      fullTimeDateNextDay.setDate(fullTimeDate.getDate() + 1)\n      var offsetDiff =\n        getTimezoneOffsetInMilliseconds(fullTimeDateNextDay) -\n        getTimezoneOffsetInMilliseconds(fullTimeDate)\n      if (offsetDiff > 0) {\n        offset += offsetDiff\n      }\n    }\n\n    return new Date(timestamp + time + offset)\n  } else {\n    return new Date(argument)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {}\n  var array = dateString.split(parseTokenDateTimeDelimeter)\n  var timeString\n\n  if (parseTokenPlainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits]\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = parseTokenMM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = parseTokenDDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = parseTokenMMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = parseTokenWww.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    return dayOfISOYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = parseTokenWwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = parseTokenHH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = parseTokenHHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = parseTokenHHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = parseTokenTimezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  // ±hh\n  token = parseTokenTimezoneHH.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = parseTokenTimezoneHHMM.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOYear (isoYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\nmodule.exports = parse\n","var startOfWeek = require('../start_of_week/index.js')\n\n/**\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek (dirtyDate) {\n  return startOfWeek(dirtyDate, {weekStartsOn: 1})\n}\n\nmodule.exports = startOfISOWeek\n","/**\n * @category Common Helpers\n * @summary Is the given argument an instance of Date?\n *\n * @description\n * Is the given argument an instance of Date?\n *\n * @param {*} argument - the argument to check\n * @returns {Boolean} the given argument is an instance of Date\n *\n * @example\n * // Is 'mayonnaise' a Date?\n * var result = isDate('mayonnaise')\n * //=> false\n */\nfunction isDate (argument) {\n  return argument instanceof Date\n}\n\nmodule.exports = isDate\n","var parse = require('../parse/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\n\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * var result = getISOYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOYear (dirtyDate) {\n  var date = parse(dirtyDate)\n  var year = date.getFullYear()\n\n  var fourthOfJanuaryOfNextYear = new Date(0)\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4)\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0)\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear)\n\n  var fourthOfJanuaryOfThisYear = new Date(0)\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4)\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0)\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear)\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n\nmodule.exports = getISOYear\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar parse = _interopDefault(require('date-fns/parse'));\nvar timezoneSupport = require('timezone-support');\nvar parseFormat = require('timezone-support/dist/parse-format');\nvar lookupConvert = require('timezone-support/dist/lookup-convert');\nvar formatDate = _interopDefault(require('date-fns/format'));\n\n/** @module date-fns */\n/**\n * @category Common Helpers\n * @summary Convert the date from the given time zone to the local time.\n *\n * @description\n * Converts the given date from the given time zone to the local time and returns it as a new `Date` object.\n * Getters for local time parts of the input `Date` object (getFullYear, getMonth, ...) will be assumed to\n * return time in the given time zone.\n *\n * The time zone has to be specified as a canonical name from the [IANA time zone list]{@link https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} options - the object with options\n * @param {String} options.timeZone - the canonical name of the source time zone\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Convert the time in the New York time zone to the local time:\n * const date = new Date(2018, 8, 2, 10, 0)\n * const result = convertToLocalTime(date, { timeZone: 'America/New_York' })\n * // Returns { date: Date, zone: { abbreviation: 'EDT', offset: -360 }\n * // The date will be \"2018-09-02T16:00:00Z\".\n */\n\nfunction convertToLocalTime(argument, options) {\n  var date = parse(argument);\n  var timeZone = timezoneSupport.findTimeZone(options.timeZone);\n\n  var _getUTCOffset = timezoneSupport.getUTCOffset(date, timeZone),\n      offset = _getUTCOffset.offset;\n\n  offset = date.getTimezoneOffset() - offset;\n  return new Date(date.getTime() - offset * 60 * 1000);\n}\n\n/** @module date-fns */\n/**\n * @category Common Helpers\n * @summary Convert the date from the local time to the given time zone.\n *\n * @description\n * Converts the given date from the local time to the given time zone and returns a new `Date` object, which has its local time set to it.\n * The returned `Date` object should not be used form comparisons or other computations. Only the its getters for the\n * local time parts can be used (getFullYear, getMonth, ...).\n *\n * The time zone has to be specified as a canonical name from the [IANA time zone list]{@link https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Object} options - the object with options\n * @param {String} options.timeZone - the canonical name of the target time zone\n * @returns {Date} the parsed date in the target time zone\n *\n * @example\n * // Convert the current local time to the New York time zone:\n * const result = convertToTimeZone(new Date(), { timeZone: 'America/New_York' })\n * Returns { date: Date, zone: { abbreviation: 'EST', offset: -300 }\n */\n\nfunction convertToTimeZone(argument, options) {\n  var date = parse(argument);\n  var timeZone = timezoneSupport.findTimeZone(options.timeZone);\n\n  var _getUTCOffset = timezoneSupport.getUTCOffset(date, timeZone),\n      offset = _getUTCOffset.offset;\n\n  offset -= date.getTimezoneOffset();\n  return new Date(date.getTime() - offset * 60 * 1000);\n}\n\n/** @module date-fns */\n/**\n * @category Common Helpers\n * @summary Parse the date string and convert it to the local time.\n *\n * @description\n * Returns the date parsed from the date string using the given format string and converts the parsed date to the local time.\n *\n * The following tokens are recognized in the format string:\n *\n * | Token  | Input example    | Description                       |\n * |--------|------------------|-----------------------------------|\n * | `YY`   | 18               | Two-digit year                    |\n * | `YYYY` | 2018             | Four-digit year                   |\n * | `M`    | 1-12             | Month, beginning at 1             |\n * | `MM`   | 01-12            | Month, 2-digits                   |\n * | `D`    | 1-31             | Day of month                      |\n * | `DD`   | 01-31            | Day of month, 2-digits            |\n * | `H`    | 0-23             | Hours                             |\n * | `HH`   | 00-23            | Hours, 2-digits                   |\n * | `h`    | 1-12             | Hours, 12-hour clock              |\n * | `hh`   | 01-12            | Hours, 12-hour clock, 2-digits    |\n * | `m`    | 0-59             | Minutes                           |\n * | `mm`   | 00-59            | Minutes, 2-digits                 |\n * | `s`    | 0-59             | Seconds                           |\n * | `ss`   | 00-59            | Seconds, 2-digits                 |\n * | `S`    | 0-9              | Hundreds of milliseconds, 1-digit |\n * | `SS`   | 00-99            | Tens of milliseconds, 2-digits    |\n * | `SSS`  | 000-999          | Milliseconds, 3-digits            |\n * | `z`    | EST              | Time zone abbreviation            |\n * | `Z`    | -5:00            | Offset from UTC, 2-digits         |\n * | `ZZ`   | -0500            | Compact offset from UTC, 2-digits |\n * | `A`    | AM PM            | Post or ante meridiem, upper-case |\n * | `a`    | am pm            | Post or ante meridiem, lower-case |\n *\n * To escape characters in the format string, wrap them in square brackets (e.g. `[G]`). Punctuation symbols (-:/.()) do not need to be wrapped.\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the custom format to parse the date from\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Parse string '11.2.2014 11:30:30' to date in Berlin:\n * const result = parseFromTimeZone('11.2.2014 11:30:30', 'D.M.YYYY H:mm:ss')\n * // Returns Tue Feb 11 2014 10:30:30 UTC\n *\n * @example\n * // Parse string '02/11/2014 11:30:30' to date, New York time:\n * const result = parseFromString('02/11/2014 11:30:30 AM GMT-0500 (EDT)',\n *   'MM/DD/YYYY h:mm:ss.SSS A [GMT]ZZ (z)')\n * // Returns Tue Feb 11 2014 16:30:30 UTC\n */\n\nfunction parseFromString(dateString, formatString) {\n  var time = parseFormat.parseZonedTime(dateString, formatString);\n  return lookupConvert.convertTimeToDate(time);\n}\n\n/** @module date-fns */\n/**\n * @category Common Helpers\n * @summary Parse the date string and convert it from the specified time zone to the local time.\n *\n * @description\n * Returns the date parsed from the date string, optionally using the given format string, and convert the parsed date from the given time zone to the local time.\n *\n * If the format string is omitted, the date string will be parsed by `date-fns/parse`, which supports extended ISO 8601 formats.\n *\n * The following tokens are recognized in the format string:\n *\n * | Token  | Input example    | Description                       |\n * |--------|------------------|-----------------------------------|\n * | `YY`   | 18               | Two-digit year                    |\n * | `YYYY` | 2018             | Four-digit year                   |\n * | `M`    | 1-12             | Month, beginning at 1             |\n * | `MM`   | 01-12            | Month, 2-digits                   |\n * | `D`    | 1-31             | Day of month                      |\n * | `DD`   | 01-31            | Day of month, 2-digits            |\n * | `H`    | 0-23             | Hours                             |\n * | `HH`   | 00-23            | Hours, 2-digits                   |\n * | `h`    | 1-12             | Hours, 12-hour clock              |\n * | `hh`   | 01-12            | Hours, 12-hour clock, 2-digits    |\n * | `m`    | 0-59             | Minutes                           |\n * | `mm`   | 00-59            | Minutes, 2-digits                 |\n * | `s`    | 0-59             | Seconds                           |\n * | `ss`   | 00-59            | Seconds, 2-digits                 |\n * | `S`    | 0-9              | Hundreds of milliseconds, 1-digit |\n * | `SS`   | 00-99            | Tens of milliseconds, 2-digits    |\n * | `SSS`  | 000-999          | Milliseconds, 3-digits            |\n * | `z`    | EST              | Time zone abbreviation            |\n * | `Z`    | -5:00            | Offset from UTC, 2-digits         |\n * | `ZZ`   | -0500            | Compact offset from UTC, 2-digits |\n * | `A`    | AM PM            | Post or ante meridiem, upper-case |\n * | `a`    | am pm            | Post or ante meridiem, lower-case |\n *\n * To escape characters in the format string, wrap them in square brackets (e.g. `[G]`). Punctuation symbols (-:/.()) do not need to be wrapped.\n *\n * The time zone has to be specified as a canonical name from the [IANA time zone list]{@link https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}.\n *\n * @param {String} dateString - the string to parse\n * @param {String} [formatString] - the custom format to parse the date from\n * @param {Object} options - the object with options\n * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} options.timeZone - the canonical name of the source time zone\n * @returns {Date} the parsed date in the local time zone\n *\n * @example\n * // Parse string '2014-02-11 11:30:30 AM' to date, New York time:\n * const result = parseFromTimeZone('2014-02-11 11:30:30',\n *   { timeZone: 'America/New_York' })\n * // Returns Tue Feb 11 2014 16:30:30 UTC\n *\n * @example\n * // Parse string '11.2.2014 11:30:30' to date, Berlin time:\n * const result = parseFromTimeZone('11.2.2014 11:30:30',\n *   'D.M.YYYY H:mm:ss', { timeZone: 'Europe/Berlin' })\n * // Returns Tue Feb 11 2014 10:30:30 UTC\n *\n * @example\n * // Parse string '+02014101', if the additional number of digits\n * // in the extended year format is 1, Madrid time:\n * var result = parseFromTimeZone('+02014101',\n *   { additionalDigits: 1, timeZone: 'Europe/Madrid' })\n * //=> Fri Apr 10 2014 22:00:00 UTC\n */\n\nfunction parseFromTimeZone(dateString, formatString, options) {\n  if (typeof formatString !== 'string') {\n    options = formatString;\n    formatString = undefined;\n  }\n\n  var _options = options,\n      timeZone = _options.timeZone;\n  timeZone = timezoneSupport.findTimeZone(timeZone);\n\n  if (formatString) {\n    var time = parseFormat.parseZonedTime(dateString, formatString);\n    var unixTime = timezoneSupport.getUnixTime(time, timeZone);\n    return new Date(unixTime);\n  }\n\n  var date = parse(dateString, options);\n\n  var _getUTCOffset = timezoneSupport.getUTCOffset(date, timeZone),\n      offset = _getUTCOffset.offset;\n\n  offset -= date.getTimezoneOffset();\n  return new Date(date.getTime() + offset * 60 * 1000);\n}\n\n/** @module date-fns */\n/**\n * @category Common Helpers\n * @summary Format the date in the specified time zone.\n *\n * @description\n * Returns the formatted date string in the given format, after converting it to the given time zone.\n *\n * The input date will be converted to the given time zone by default, using its UTC timestamp.\n * If the local time in the input date is already in the given time zone, set `options.convertTimeZone`\n * to `false`. Otherwise the date will be considered in local time and converted.\n *\n * The time zone has to be specified as a canonical name from the [IANA time zone list]{@link https://en.wikipedia.org/wiki/List_of_tz_database_time_zones}.\n *\n * The following tokens are recognized in the format string:\n *\n * | Unit                    | Token | Result examples                  |\n * |-------------------------|-------|----------------------------------|\n * | Month                   | M     | 1, 2, ..., 12                    |\n * |                         | Mo    | 1st, 2nd, ..., 12th              |\n * |                         | MM    | 01, 02, ..., 12                  |\n * |                         | MMM   | Jan, Feb, ..., Dec               |\n * |                         | MMMM  | January, February, ..., December |\n * | Quarter                 | Q     | 1, 2, 3, 4                       |\n * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Day of month            | D     | 1, 2, ..., 31                    |\n * |                         | Do    | 1st, 2nd, ..., 31st              |\n * |                         | DD    | 01, 02, ..., 31                  |\n * | Day of year             | DDD   | 1, 2, ..., 366                   |\n * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         | DDDD  | 001, 002, ..., 366               |\n * | Day of week             | d     | 0, 1, ..., 6                     |\n * |                         | do    | 0th, 1st, ..., 6th               |\n * |                         | dd    | Su, Mo, ..., Sa                  |\n * |                         | ddd   | Sun, Mon, ..., Sat               |\n * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n * | ISO week                | W     | 1, 2, ..., 53                    |\n * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         | WW    | 01, 02, ..., 53                  |\n * | Year                    | YY    | 00, 01, ..., 99                  |\n * |                         | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n * |                         | GGGG  | 1900, 1901, ..., 2099            |\n * | AM/PM                   | A     | AM, PM                           |\n * |                         | a     | am, pm                           |\n * |                         | aa    | a.m., p.m.                       |\n * | Hour                    | H     | 0, 1, ... 23                     |\n * |                         | HH    | 00, 01, ... 23                   |\n * |                         | h     | 1, 2, ..., 12                    |\n * |                         | hh    | 01, 02, ..., 12                  |\n * | Minute                  | m     | 0, 1, ..., 59                    |\n * |                         | mm    | 00, 01, ..., 59                  |\n * | Second                  | s     | 0, 1, ..., 59                    |\n * |                         | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | SSS   | 000, 001, ..., 999               |\n * | Timezone abbreviation   | z     | CET, CEST, EST, EDT, ...         |\n * | Timezone offset to UTC  | Z     | -01:00, +00:00, ... +12:00       |\n * |                         | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | X     | 512969520                        |\n * | Milliseconds timestamp  | x     | 512969520900                     |\n *\n * The characters wrapped in square brackets are escaped.\n *\n * The result may vary by locale.\n *\n * @param {Date|String|Number} argument - the original date\n * @param {String} formatString - the string of formatting tokens\n * @param {Object} options - the object with options\n * @param {Object} [options.locale=enLocale] - the locale object\n * @param {String} options.timeZone - the canonical name of the target time zone\n * @param {String} [options.convertTimeZone=true] - if the date should be converted to the given time zone before formatting\n * @returns {String} the formatted date string\n *\n * @example\n * // Represent midnight on 11 February 2014, UTC in middle-endian format, New York time:\n * var result = formatToTimeZone(\n *   new Date(Date.UTC(2014, 1, 11)),\n *   'MM/dd/yyyy h:mm A [GMT]Z (z)',\n *   { timeZone: 'America/New_York' }\n * )\n * // Returns '02/10/2014 7:00 PM GMT-0500 (EST)'\n *\n * @example\n * // Represent noon on 2 July 2014 in Esperanto, Madrid time:\n * var locale = require('date-fns/locale/eo')\n * var result = formatToTimeZone(\n *   new Date(2014, 6, 2, 12),\n *   \"HH:mm, do 'de' MMMM yyyy (Zz)\",\n *   { locale, timeZone: 'Europe/Madrid', convertTimeZone: false }\n * )\n * // Returns '12:00, 2-a de julio 2014 (+02:00 CEST)'\n */\n\nfunction formatToTimeZone(argument, formatString, options) {\n  var date = parse(argument);\n  var timeZone = options.timeZone,\n      convertTimeZone = options.convertTimeZone;\n  timeZone = timezoneSupport.findTimeZone(timeZone);\n  timeZone = timezoneSupport.getUTCOffset(date, timeZone);\n\n  if (convertTimeZone !== false) {\n    var offset = timeZone.offset - date.getTimezoneOffset();\n    date = new Date(date.getTime() - offset * 60 * 1000);\n  }\n\n  formatString = formatTimeZoneTokens(formatString, timeZone);\n  return formatDate(date, formatString, options);\n}\n\nfunction padToTwoDigits(number) {\n  return number > 9 ? number : \"0\" + number;\n}\n\nfunction formatTimeZoneOffset(offset, separator) {\n  var sign;\n\n  if (offset <= 0) {\n    offset = -offset;\n    sign = '+';\n  } else {\n    sign = '-';\n  }\n\n  var hours = padToTwoDigits(Math.floor(offset / 60));\n  var minutes = padToTwoDigits(offset % 60);\n  return sign + hours + separator + minutes;\n}\n\nfunction formatTimeZoneTokens(format, timeZone) {\n  return format.replace(/z|ZZ?/g, function (match) {\n    switch (match) {\n      case 'z':\n        return \"[\" + timeZone.abbreviation + \"]\";\n\n      case 'Z':\n        return formatTimeZoneOffset(timeZone.offset, ':');\n\n      default:\n        // 'ZZ'\n        return formatTimeZoneOffset(timeZone.offset, '');\n    }\n  });\n}\n\nexports.convertToLocalTime = convertToLocalTime;\nexports.convertToTimeZone = convertToTimeZone;\nexports.parseFromString = parseFromString;\nexports.parseFromTimeZone = parseFromTimeZone;\nexports.formatToTimeZone = formatToTimeZone;\n","var MILLISECONDS_IN_MINUTE = 60000\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nmodule.exports = function getTimezoneOffsetInMilliseconds (dirtyDate) {\n  var date = new Date(dirtyDate.getTime())\n  var baseTimezoneOffset = date.getTimezoneOffset()\n  date.setSeconds(0, 0)\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE\n\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset\n}\n","(function() { module.exports = this[\"TimezoneSupport\"]; }());","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar formattingTokens = /(\\[[^[]*\\])|([-:/.()\\s]+)|(A|a|YYYY|YY?|MM?|DD?|d|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g;\n\nvar match1 = /\\d/; // 0 - 9\n\nvar match2 = /\\d\\d/; // 00 - 99\n\nvar match3 = /\\d{3}/; // 000 - 999\n\nvar match4 = /\\d{4}/; // 0000 - 9999\n\nvar match1to2 = /\\d\\d?/; // 0 - 99\n\nvar matchUpperAMPM = /[AP]M/;\nvar matchLowerAMPM = /[ap]m/;\nvar matchSigned = /[+-]?\\d+/; // -inf - inf\n\nvar matchOffset = /[+-]\\d\\d:?\\d\\d/; // +00:00 -00:00 +0000 or -0000\n\nvar matchAbbreviation = /[A-Z]{3,4}/; // CET\n\nvar parseTokenExpressions = {};\nvar parseTokenFunctions = {};\nvar parsers = {};\n\nfunction correctDayPeriod(time) {\n  var afternoon = time.afternoon;\n\n  if (afternoon !== undefined) {\n    var hours = time.hours;\n\n    if (afternoon) {\n      if (hours < 12) {\n        time.hours += 12;\n      }\n    } else {\n      if (hours === 12) {\n        time.hours = 0;\n      }\n    }\n\n    delete time.afternoon;\n  }\n}\n\nfunction makeParser(format) {\n  var array = format.match(formattingTokens);\n\n  if (!array) {\n    throw new Error(\"Invalid format: \\\"\" + format + \"\\\".\");\n  }\n\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    var token = array[i];\n    var regex = parseTokenExpressions[token];\n    var parser = parseTokenFunctions[token];\n\n    if (parser) {\n      array[i] = {\n        regex: regex,\n        parser: parser\n      };\n    } else {\n      array[i] = token.replace(/^\\[|\\]$/g, '');\n    }\n  }\n\n  return function (input) {\n    var time = {};\n\n    for (var _i = 0, start = 0; _i < length; ++_i) {\n      var _token = array[_i];\n\n      if (typeof _token === 'string') {\n        if (input.indexOf(_token, start) !== start) {\n          var part = input.substr(start, _token.length);\n          throw new Error(\"Expected \\\"\" + _token + \"\\\" at character \" + start + \", found \\\"\" + part + \"\\\".\");\n        }\n\n        start += _token.length;\n      } else {\n        var _regex = _token.regex,\n            _parser = _token.parser;\n\n        var _part = input.substr(start);\n\n        var match = _regex.exec(_part);\n\n        if (!match || match.index !== 0) {\n          throw new Error(\"Matching \\\"\" + _regex + \"\\\" at character \" + start + \" failed with \\\"\" + _part + \"\\\".\");\n        }\n\n        var value = match[0];\n\n        _parser.call(time, value);\n\n        start += value.length;\n      }\n    }\n\n    correctDayPeriod(time);\n    return time;\n  };\n}\n\nfunction addExpressionToken(token, regex) {\n  parseTokenExpressions[token] = regex;\n}\n\nfunction addParseToken(tokens, property) {\n  if (typeof tokens === 'string') {\n    tokens = [tokens];\n  }\n\n  var callback = typeof property === 'string' ? function (input) {\n    this[property] = +input;\n  } : property;\n\n  for (var _iterator = tokens, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i2 >= _iterator.length) break;\n      _ref = _iterator[_i2++];\n    } else {\n      _i2 = _iterator.next();\n      if (_i2.done) break;\n      _ref = _i2.value;\n    }\n\n    var token = _ref;\n    parseTokenFunctions[token] = callback;\n  }\n}\n\nfunction offsetFromString(string) {\n  var parts = string.match(/([+-]|\\d\\d)/g);\n  var minutes = +(parts[1] * 60) + +parts[2];\n  return minutes === 0 ? 0 : parts[0] === '+' ? -minutes : minutes;\n}\n\naddExpressionToken('A', matchUpperAMPM);\naddParseToken(['A'], function (input) {\n  this.afternoon = input === 'PM';\n});\naddExpressionToken('a', matchLowerAMPM);\naddParseToken(['a'], function (input) {\n  this.afternoon = input === 'pm';\n});\naddExpressionToken('S', match1);\naddExpressionToken('SS', match2);\naddExpressionToken('SSS', match3);\n\nvar _loop = function _loop(token, factor) {\n  addParseToken(token, function (input) {\n    this.milliseconds = +input * factor;\n  });\n};\n\nfor (var token = 'S', factor = 100; factor >= 1; token += 'S', factor /= 10) {\n  _loop(token, factor);\n}\n\naddExpressionToken('s', match1to2);\naddExpressionToken('ss', match2);\naddParseToken(['s', 'ss'], 'seconds');\naddExpressionToken('m', match1to2);\naddExpressionToken('mm', match2);\naddParseToken(['m', 'mm'], 'minutes');\naddExpressionToken('H', match1to2);\naddExpressionToken('h', match1to2);\naddExpressionToken('HH', match2);\naddExpressionToken('hh', match2);\naddParseToken(['H', 'HH', 'h', 'hh'], 'hours');\naddExpressionToken('d', match1);\naddParseToken('d', 'dayOfWeek');\naddExpressionToken('D', match1to2);\naddExpressionToken('DD', match2);\naddParseToken(['D', 'DD'], 'day');\naddExpressionToken('M', match1to2);\naddExpressionToken('MM', match2);\naddParseToken(['M', 'MM'], 'month');\naddExpressionToken('Y', matchSigned);\naddExpressionToken('YY', match2);\naddExpressionToken('YYYY', match4);\naddParseToken(['Y', 'YYYY'], 'year');\naddParseToken('YY', function (input) {\n  input = +input;\n  this.year = input + (input > 68 ? 1900 : 2000);\n});\naddExpressionToken('z', matchAbbreviation);\naddParseToken('z', function (input) {\n  var zone = this.zone || (this.zone = {});\n  zone.abbreviation = input;\n});\naddExpressionToken('Z', matchOffset);\naddExpressionToken('ZZ', matchOffset);\naddParseToken(['Z', 'ZZ'], function (input) {\n  var zone = this.zone || (this.zone = {});\n  zone.offset = offsetFromString(input);\n});\n\nfunction parseZonedTime(input, format) {\n  var parser = parsers[format];\n\n  if (!parser) {\n    parser = parsers[format] = makeParser(format);\n  }\n\n  return parser(input);\n}\n\nfunction padToTwo(number) {\n  return number > 9 ? number : '0' + number;\n}\n\nfunction padToThree(number) {\n  return number > 99 ? number : number > 9 ? '0' + number : '00' + number;\n}\n\nfunction padToFour(number) {\n  return number > 999 ? number : number > 99 ? '0' + number : number > 9 ? '00' + number : '000' + number;\n}\n\nvar padToN = [undefined, undefined, padToTwo, padToThree, padToFour];\n\nfunction padWithZeros(number, length) {\n  return padToN[length](number);\n}\n\nvar formatTokenFunctions = {};\nvar formatters = {};\n\nfunction makeFormatter(format) {\n  var array = format.match(formattingTokens);\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    var token = array[i];\n    var formatter = formatTokenFunctions[token];\n\n    if (formatter) {\n      array[i] = formatter;\n    } else {\n      array[i] = token.replace(/^\\[|\\]$/g, '');\n    }\n  }\n\n  return function (time) {\n    var output = '';\n\n    for (var _iterator = array, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _token = _ref;\n      output += typeof _token === 'function' ? _token.call(time) : _token;\n    }\n\n    return output;\n  };\n}\n\nvar addFormatToken = function addFormatToken(token, padded, property) {\n  var callback = typeof property === 'string' ? function () {\n    return this[property];\n  } : property;\n\n  if (token) {\n    formatTokenFunctions[token] = callback;\n  }\n\n  if (padded) {\n    formatTokenFunctions[padded[0]] = function () {\n      return padWithZeros(callback.call(this), padded[1]);\n    };\n  }\n};\n\naddFormatToken('A', 0, function () {\n  return this.hours < 12 ? 'AM' : 'PM';\n});\naddFormatToken('a', 0, function () {\n  return this.hours < 12 ? 'am' : 'pm';\n});\naddFormatToken('S', 0, function () {\n  return Math.floor(this.milliseconds / 100);\n});\naddFormatToken(0, ['SS', 2], function () {\n  return Math.floor(this.milliseconds / 10);\n});\naddFormatToken(0, ['SSS', 3], 'milliseconds');\naddFormatToken('s', ['ss', 2], 'seconds');\naddFormatToken('m', ['mm', 2], 'minutes');\naddFormatToken('h', ['hh', 2], function () {\n  return this.hours % 12 || 12;\n});\naddFormatToken('H', ['HH', 2], 'hours');\naddFormatToken('d', 0, 'dayOfWeek');\naddFormatToken('D', ['DD', 2], 'day');\naddFormatToken('M', ['MM', 2], 'month');\naddFormatToken(0, ['YY', 2], function () {\n  return this.year % 100;\n});\naddFormatToken('Y', ['YYYY', 4], 'year');\naddFormatToken('z', 0, function () {\n  return this.zone.abbreviation;\n});\n\nfunction addTimeZoneFormatToken(token, separator) {\n  addFormatToken(token, 0, function () {\n    var offset = -this.zone.offset;\n    var sign = offset < 0 ? '-' : '+';\n    offset = Math.abs(offset);\n    return sign + padWithZeros(Math.floor(offset / 60), 2) + separator + padWithZeros(offset % 60, 2);\n  });\n}\n\naddTimeZoneFormatToken('Z', ':');\naddTimeZoneFormatToken('ZZ', '');\n\nfunction formatZonedTime(time, format) {\n  var formatter = formatters[format];\n\n  if (!formatter) {\n    formatter = formatters[format] = makeFormatter(format);\n  }\n\n  return formatter(time);\n}\n\nexports.parseZonedTime = parseZonedTime;\nexports.formatZonedTime = formatZonedTime;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction charCodeToInt(charCode) {\n  if (charCode > 96) {\n    return charCode - 87;\n  } else if (charCode > 64) {\n    return charCode - 29;\n  }\n\n  return charCode - 48;\n}\n\nfunction unpackBase60(string) {\n  var parts = string.split('.');\n  var whole = parts[0];\n  var fractional = parts[1] || '';\n  var multiplier = 1;\n  var start = 0;\n  var out = 0;\n  var sign = 1; // handle negative numbers\n\n  if (string.charCodeAt(0) === 45) {\n    start = 1;\n    sign = -1;\n  } // handle digits before the decimal\n\n\n  for (var i = start, length = whole.length; i < length; ++i) {\n    var num = charCodeToInt(whole.charCodeAt(i));\n    out = 60 * out + num;\n  } // handle digits after the decimal\n  // istanbul ignore next\n\n\n  for (var _i = 0, _length = fractional.length; _i < _length; ++_i) {\n    var _num = charCodeToInt(fractional.charCodeAt(_i));\n\n    multiplier = multiplier / 60;\n    out += _num * multiplier;\n  }\n\n  return out * sign;\n}\n\nfunction arrayToInt(array) {\n  for (var i = 0, length = array.length; i < length; ++i) {\n    array[i] = unpackBase60(array[i]);\n  }\n}\n\nfunction intToUntil(array, length) {\n  for (var i = 0; i < length; ++i) {\n    array[i] = Math.round((array[i - 1] || 0) + array[i] * 60000);\n  }\n\n  array[length - 1] = Infinity;\n}\n\nfunction mapIndices(source, indices) {\n  var out = [];\n\n  for (var i = 0, length = indices.length; i < length; ++i) {\n    out[i] = source[indices[i]];\n  }\n\n  return out;\n}\n\nfunction unpack(string) {\n  var data = string.split('|');\n  var offsets = data[2].split(' ');\n  var indices = data[3].split('');\n  var untils = data[4].split(' ');\n  arrayToInt(offsets);\n  arrayToInt(indices);\n  arrayToInt(untils);\n  intToUntil(untils, indices.length);\n  var name = data[0];\n  var abbreviations = mapIndices(data[1].split(' '), indices);\n  var population = data[5] | 0;\n  offsets = mapIndices(offsets, indices);\n  return {\n    name: name,\n    abbreviations: abbreviations,\n    offsets: offsets,\n    untils: untils,\n    population: population\n  };\n}\n\nvar zones;\nvar names;\nvar links;\nvar instances;\n\nfunction populateTimeZones(_ref) {\n  var zoneData = _ref.zones,\n      linkData = _ref.links;\n  zones = {};\n  names = zoneData.map(function (packed) {\n    var name = packed.substr(0, packed.indexOf('|'));\n    zones[name] = packed;\n    return name;\n  });\n  links = linkData.reduce(function (result, packed) {\n    var _packed$split = packed.split('|'),\n        name = _packed$split[0],\n        alias = _packed$split[1];\n\n    result[alias] = name;\n    return result;\n  }, {});\n  instances = {};\n}\n\nfunction listTimeZones() {\n  return names.slice();\n}\n\nfunction findTimeZone(alias) {\n  var name = links[alias] || alias;\n  var timeZone = instances[name];\n\n  if (!timeZone) {\n    var packed = zones[name];\n\n    if (!packed) {\n      throw new Error(\"Unknown time zone \\\"\" + name + \"\\\".\");\n    }\n\n    timeZone = instances[name] = unpack(packed);\n  }\n\n  return timeZone;\n}\n\nfunction getUnixTimeFromUTC(_ref) {\n  var year = _ref.year,\n      month = _ref.month,\n      day = _ref.day,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      _ref$seconds = _ref.seconds,\n      seconds = _ref$seconds === void 0 ? 0 : _ref$seconds,\n      _ref$milliseconds = _ref.milliseconds,\n      milliseconds = _ref$milliseconds === void 0 ? 0 : _ref$milliseconds;\n  return Date.UTC(year, month - 1, day, hours, minutes, seconds, milliseconds);\n}\n\nfunction getDateFromTime(_ref2) {\n  var year = _ref2.year,\n      month = _ref2.month,\n      day = _ref2.day,\n      hours = _ref2.hours,\n      minutes = _ref2.minutes,\n      _ref2$seconds = _ref2.seconds,\n      seconds = _ref2$seconds === void 0 ? 0 : _ref2$seconds,\n      _ref2$milliseconds = _ref2.milliseconds,\n      milliseconds = _ref2$milliseconds === void 0 ? 0 : _ref2$milliseconds;\n  return new Date(year, month - 1, day, hours, minutes, seconds, milliseconds);\n}\n\nfunction getUTCTime(date) {\n  var year = date.getUTCFullYear();\n  var month = date.getUTCMonth() + 1;\n  var day = date.getUTCDate();\n  var dayOfWeek = date.getUTCDay();\n  var hours = date.getUTCHours();\n  var minutes = date.getUTCMinutes();\n  var seconds = date.getUTCSeconds() || 0;\n  var milliseconds = date.getUTCMilliseconds() || 0;\n  return {\n    year: year,\n    month: month,\n    day: day,\n    dayOfWeek: dayOfWeek,\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds,\n    milliseconds: milliseconds\n  };\n}\n\nfunction getLocalTime(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  var dayOfWeek = date.getDay();\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds() || 0;\n  var milliseconds = date.getMilliseconds() || 0;\n  return {\n    year: year,\n    month: month,\n    day: day,\n    dayOfWeek: dayOfWeek,\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds,\n    milliseconds: milliseconds\n  };\n}\n\nfunction getDateTime(date, options) {\n  var _ref3 = options || {},\n      useUTC = _ref3.useUTC;\n\n  var extract;\n\n  if (useUTC === true) {\n    extract = getUTCTime;\n  } else if (useUTC === false) {\n    extract = getLocalTime;\n  } else {\n    throw new Error('Extract local or UTC date? Set useUTC option.');\n  }\n\n  return extract(date);\n}\n\nfunction findTransitionIndex(unixTime, timeZone) {\n  var untils = timeZone.untils;\n\n  for (var i = 0, length = untils.length; i < length; ++i) {\n    if (unixTime < untils[i]) {\n      return i;\n    }\n  }\n}\n\nfunction getTransition(unixTime, timeZone) {\n  var transitionIndex = findTransitionIndex(unixTime, timeZone);\n  var abbreviation = timeZone.abbreviations[transitionIndex];\n  var offset = timeZone.offsets[transitionIndex];\n  return {\n    abbreviation: abbreviation,\n    offset: offset\n  };\n}\n\nfunction attachEpoch(time, unixTime) {\n  Object.defineProperty(time, 'epoch', {\n    value: unixTime\n  });\n}\n\nfunction getUTCOffset(date, timeZone) {\n  var unixTime = typeof date === 'number' ? date : date.getTime();\n\n  var _getTransition = getTransition(unixTime, timeZone),\n      abbreviation = _getTransition.abbreviation,\n      offset = _getTransition.offset;\n\n  return {\n    abbreviation: abbreviation,\n    offset: offset\n  };\n}\n\nfunction getZonedTime(date, timeZone) {\n  var gotUnixTime = typeof date === 'number';\n  var unixTime = gotUnixTime ? date : date.getTime();\n\n  var _getTransition2 = getTransition(unixTime, timeZone),\n      abbreviation = _getTransition2.abbreviation,\n      offset = _getTransition2.offset;\n\n  if (gotUnixTime || offset) {\n    date = new Date(unixTime - offset * 60000);\n  }\n\n  var time = getUTCTime(date);\n  time.zone = {\n    abbreviation: abbreviation,\n    offset: offset\n  };\n  attachEpoch(time, unixTime);\n  return time;\n}\n\nfunction getUnixTime(time, timeZone) {\n  var zone = time.zone,\n      epoch = time.epoch;\n\n  if (epoch) {\n    if (timeZone) {\n      throw new Error('Both epoch and other time zone specified. Omit the other one.');\n    }\n\n    return epoch;\n  }\n\n  var unixTime = getUnixTimeFromUTC(time);\n\n  if (zone) {\n    if (timeZone) {\n      throw new Error('Both own and other time zones specified. Omit the other one.');\n    }\n  } else {\n    if (!timeZone) {\n      throw new Error('Missing other time zone.');\n    }\n\n    zone = getTransition(unixTime, timeZone);\n  }\n\n  return unixTime + zone.offset * 60000;\n}\n\nfunction setTimeZone(time, timeZone, options) {\n  if (time instanceof Date) {\n    time = getDateTime(time, options);\n  } else {\n    var _time = time,\n        year = _time.year,\n        month = _time.month,\n        day = _time.day,\n        hours = _time.hours,\n        minutes = _time.minutes,\n        _time$seconds = _time.seconds,\n        seconds = _time$seconds === void 0 ? 0 : _time$seconds,\n        _time$milliseconds = _time.milliseconds,\n        milliseconds = _time$milliseconds === void 0 ? 0 : _time$milliseconds;\n    time = {\n      year: year,\n      month: month,\n      day: day,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      milliseconds: milliseconds\n    };\n  }\n\n  var unixTime = getUnixTimeFromUTC(time);\n  var utcDate = new Date(unixTime);\n  time.dayOfWeek = utcDate.getUTCDay();\n\n  var _getTransition3 = getTransition(unixTime, timeZone),\n      abbreviation = _getTransition3.abbreviation,\n      offset = _getTransition3.offset;\n\n  time.zone = {\n    abbreviation: abbreviation,\n    offset: offset\n  };\n  attachEpoch(time, unixTime + offset * 60000);\n  return time;\n}\n\nfunction convertTimeToDate(time) {\n  var epoch = time.epoch;\n\n  if (epoch !== undefined) {\n    return new Date(epoch);\n  }\n\n  var _ref = time.zone || {},\n      offset = _ref.offset;\n\n  if (offset === undefined) {\n    return getDateFromTime(time);\n  }\n\n  var unixTime = getUnixTimeFromUTC(time);\n  return new Date(unixTime + offset * 60000);\n}\n\nfunction convertDateToTime(date) {\n  var time = getLocalTime(date);\n  var match = /\\(([^)]+)\\)$/.exec(date.toTimeString());\n  time.zone = {\n    abbreviation: match ? match[1] // istanbul ignore next\n    : '???',\n    offset: date.getTimezoneOffset()\n  };\n  attachEpoch(time, date.getTime());\n  return time;\n}\n\nexports.populateTimeZones = populateTimeZones;\nexports.listTimeZones = listTimeZones;\nexports.findTimeZone = findTimeZone;\nexports.getUTCOffset = getUTCOffset;\nexports.getZonedTime = getZonedTime;\nexports.getUnixTime = getUnixTime;\nexports.setTimeZone = setTimeZone;\nexports.convertTimeToDate = convertTimeToDate;\nexports.convertDateToTime = convertDateToTime;\n","var getDayOfYear = require('../get_day_of_year/index.js')\nvar getISOWeek = require('../get_iso_week/index.js')\nvar getISOYear = require('../get_iso_year/index.js')\nvar parse = require('../parse/index.js')\nvar isValid = require('../is_valid/index.js')\nvar enLocale = require('../locale/en/index.js')\n\n/**\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format.\n *\n * Accepted tokens:\n * | Unit                    | Token | Result examples                  |\n * |-------------------------|-------|----------------------------------|\n * | Month                   | M     | 1, 2, ..., 12                    |\n * |                         | Mo    | 1st, 2nd, ..., 12th              |\n * |                         | MM    | 01, 02, ..., 12                  |\n * |                         | MMM   | Jan, Feb, ..., Dec               |\n * |                         | MMMM  | January, February, ..., December |\n * | Quarter                 | Q     | 1, 2, 3, 4                       |\n * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Day of month            | D     | 1, 2, ..., 31                    |\n * |                         | Do    | 1st, 2nd, ..., 31st              |\n * |                         | DD    | 01, 02, ..., 31                  |\n * | Day of year             | DDD   | 1, 2, ..., 366                   |\n * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         | DDDD  | 001, 002, ..., 366               |\n * | Day of week             | d     | 0, 1, ..., 6                     |\n * |                         | do    | 0th, 1st, ..., 6th               |\n * |                         | dd    | Su, Mo, ..., Sa                  |\n * |                         | ddd   | Sun, Mon, ..., Sat               |\n * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n * | ISO week                | W     | 1, 2, ..., 53                    |\n * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         | WW    | 01, 02, ..., 53                  |\n * | Year                    | YY    | 00, 01, ..., 99                  |\n * |                         | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n * |                         | GGGG  | 1900, 1901, ..., 2099            |\n * | AM/PM                   | A     | AM, PM                           |\n * |                         | a     | am, pm                           |\n * |                         | aa    | a.m., p.m.                       |\n * | Hour                    | H     | 0, 1, ... 23                     |\n * |                         | HH    | 00, 01, ... 23                   |\n * |                         | h     | 1, 2, ..., 12                    |\n * |                         | hh    | 01, 02, ..., 12                  |\n * | Minute                  | m     | 0, 1, ..., 59                    |\n * |                         | mm    | 00, 01, ..., 59                  |\n * | Second                  | s     | 0, 1, ..., 59                    |\n * |                         | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | SSS   | 000, 001, ..., 999               |\n * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |\n * |                         | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | X     | 512969520                        |\n * | Milliseconds timestamp  | x     | 512969520900                     |\n *\n * The characters wrapped in square brackets are escaped.\n *\n * The result may vary by locale.\n *\n * @param {Date|String|Number} date - the original date\n * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens\n * @param {Object} [options] - the object with options\n * @param {Object} [options.locale=enLocale] - the locale object\n * @returns {String} the formatted date string\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(\n *   new Date(2014, 1, 11),\n *   'MM/DD/YYYY'\n * )\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * var eoLocale = require('date-fns/locale/eo')\n * var result = format(\n *   new Date(2014, 6, 2),\n *   'Do [de] MMMM YYYY',\n *   {locale: eoLocale}\n * )\n * //=> '2-a de julio 2014'\n */\nfunction format (dirtyDate, dirtyFormatStr, dirtyOptions) {\n  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n  var options = dirtyOptions || {}\n\n  var locale = options.locale\n  var localeFormatters = enLocale.format.formatters\n  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp\n  if (locale && locale.format && locale.format.formatters) {\n    localeFormatters = locale.format.formatters\n\n    if (locale.format.formattingTokensRegExp) {\n      formattingTokensRegExp = locale.format.formattingTokensRegExp\n    }\n  }\n\n  var date = parse(dirtyDate)\n\n  if (!isValid(date)) {\n    return 'Invalid Date'\n  }\n\n  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp)\n\n  return formatFn(date)\n}\n\nvar formatters = {\n  // Month: 1, 2, ..., 12\n  'M': function (date) {\n    return date.getMonth() + 1\n  },\n\n  // Month: 01, 02, ..., 12\n  'MM': function (date) {\n    return addLeadingZeros(date.getMonth() + 1, 2)\n  },\n\n  // Quarter: 1, 2, 3, 4\n  'Q': function (date) {\n    return Math.ceil((date.getMonth() + 1) / 3)\n  },\n\n  // Day of month: 1, 2, ..., 31\n  'D': function (date) {\n    return date.getDate()\n  },\n\n  // Day of month: 01, 02, ..., 31\n  'DD': function (date) {\n    return addLeadingZeros(date.getDate(), 2)\n  },\n\n  // Day of year: 1, 2, ..., 366\n  'DDD': function (date) {\n    return getDayOfYear(date)\n  },\n\n  // Day of year: 001, 002, ..., 366\n  'DDDD': function (date) {\n    return addLeadingZeros(getDayOfYear(date), 3)\n  },\n\n  // Day of week: 0, 1, ..., 6\n  'd': function (date) {\n    return date.getDay()\n  },\n\n  // Day of ISO week: 1, 2, ..., 7\n  'E': function (date) {\n    return date.getDay() || 7\n  },\n\n  // ISO week: 1, 2, ..., 53\n  'W': function (date) {\n    return getISOWeek(date)\n  },\n\n  // ISO week: 01, 02, ..., 53\n  'WW': function (date) {\n    return addLeadingZeros(getISOWeek(date), 2)\n  },\n\n  // Year: 00, 01, ..., 99\n  'YY': function (date) {\n    return addLeadingZeros(date.getFullYear(), 4).substr(2)\n  },\n\n  // Year: 1900, 1901, ..., 2099\n  'YYYY': function (date) {\n    return addLeadingZeros(date.getFullYear(), 4)\n  },\n\n  // ISO week-numbering year: 00, 01, ..., 99\n  'GG': function (date) {\n    return String(getISOYear(date)).substr(2)\n  },\n\n  // ISO week-numbering year: 1900, 1901, ..., 2099\n  'GGGG': function (date) {\n    return getISOYear(date)\n  },\n\n  // Hour: 0, 1, ... 23\n  'H': function (date) {\n    return date.getHours()\n  },\n\n  // Hour: 00, 01, ..., 23\n  'HH': function (date) {\n    return addLeadingZeros(date.getHours(), 2)\n  },\n\n  // Hour: 1, 2, ..., 12\n  'h': function (date) {\n    var hours = date.getHours()\n    if (hours === 0) {\n      return 12\n    } else if (hours > 12) {\n      return hours % 12\n    } else {\n      return hours\n    }\n  },\n\n  // Hour: 01, 02, ..., 12\n  'hh': function (date) {\n    return addLeadingZeros(formatters['h'](date), 2)\n  },\n\n  // Minute: 0, 1, ..., 59\n  'm': function (date) {\n    return date.getMinutes()\n  },\n\n  // Minute: 00, 01, ..., 59\n  'mm': function (date) {\n    return addLeadingZeros(date.getMinutes(), 2)\n  },\n\n  // Second: 0, 1, ..., 59\n  's': function (date) {\n    return date.getSeconds()\n  },\n\n  // Second: 00, 01, ..., 59\n  'ss': function (date) {\n    return addLeadingZeros(date.getSeconds(), 2)\n  },\n\n  // 1/10 of second: 0, 1, ..., 9\n  'S': function (date) {\n    return Math.floor(date.getMilliseconds() / 100)\n  },\n\n  // 1/100 of second: 00, 01, ..., 99\n  'SS': function (date) {\n    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)\n  },\n\n  // Millisecond: 000, 001, ..., 999\n  'SSS': function (date) {\n    return addLeadingZeros(date.getMilliseconds(), 3)\n  },\n\n  // Timezone: -01:00, +00:00, ... +12:00\n  'Z': function (date) {\n    return formatTimezone(date.getTimezoneOffset(), ':')\n  },\n\n  // Timezone: -0100, +0000, ... +1200\n  'ZZ': function (date) {\n    return formatTimezone(date.getTimezoneOffset())\n  },\n\n  // Seconds timestamp: 512969520\n  'X': function (date) {\n    return Math.floor(date.getTime() / 1000)\n  },\n\n  // Milliseconds timestamp: 512969520900\n  'x': function (date) {\n    return date.getTime()\n  }\n}\n\nfunction buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {\n  var array = formatStr.match(formattingTokensRegExp)\n  var length = array.length\n\n  var i\n  var formatter\n  for (i = 0; i < length; i++) {\n    formatter = localeFormatters[array[i]] || formatters[array[i]]\n    if (formatter) {\n      array[i] = formatter\n    } else {\n      array[i] = removeFormattingTokens(array[i])\n    }\n  }\n\n  return function (date) {\n    var output = ''\n    for (var i = 0; i < length; i++) {\n      if (array[i] instanceof Function) {\n        output += array[i](date, formatters)\n      } else {\n        output += array[i]\n      }\n    }\n    return output\n  }\n}\n\nfunction removeFormattingTokens (input) {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|]$/g, '')\n  }\n  return input.replace(/\\\\/g, '')\n}\n\nfunction formatTimezone (offset, delimeter) {\n  delimeter = delimeter || ''\n  var sign = offset > 0 ? '-' : '+'\n  var absOffset = Math.abs(offset)\n  var hours = Math.floor(absOffset / 60)\n  var minutes = absOffset % 60\n  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)\n}\n\nfunction addLeadingZeros (number, targetLength) {\n  var output = Math.abs(number).toString()\n  while (output.length < targetLength) {\n    output = '0' + output\n  }\n  return output\n}\n\nmodule.exports = format\n","var parse = require('../parse/index.js')\nvar startOfYear = require('../start_of_year/index.js')\nvar differenceInCalendarDays = require('../difference_in_calendar_days/index.js')\n\n/**\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * var result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear (dirtyDate) {\n  var date = parse(dirtyDate)\n  var diff = differenceInCalendarDays(date, startOfYear(date))\n  var dayOfYear = diff + 1\n  return dayOfYear\n}\n\nmodule.exports = getDayOfYear\n","var parse = require('../parse/index.js')\n\n/**\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear (dirtyDate) {\n  var cleanDate = parse(dirtyDate)\n  var date = new Date(0)\n  date.setFullYear(cleanDate.getFullYear(), 0, 1)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfYear\n","var startOfDay = require('../start_of_day/index.js')\n\nvar MILLISECONDS_IN_MINUTE = 60000\nvar MILLISECONDS_IN_DAY = 86400000\n\n/**\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n */\nfunction differenceInCalendarDays (dirtyDateLeft, dirtyDateRight) {\n  var startOfDayLeft = startOfDay(dirtyDateLeft)\n  var startOfDayRight = startOfDay(dirtyDateRight)\n\n  var timestampLeft = startOfDayLeft.getTime() -\n    startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n  var timestampRight = startOfDayRight.getTime() -\n    startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)\n}\n\nmodule.exports = differenceInCalendarDays\n","var parse = require('../parse/index.js')\n\n/**\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay (dirtyDate) {\n  var date = parse(dirtyDate)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfDay\n","var parse = require('../parse/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\nvar startOfISOYear = require('../start_of_iso_year/index.js')\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n/**\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the given date\n * @returns {Number} the ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek (dirtyDate) {\n  var date = parse(dirtyDate)\n  var diff = startOfISOWeek(date).getTime() - startOfISOYear(date).getTime()\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n\nmodule.exports = getISOWeek\n","var parse = require('../parse/index.js')\n\n/**\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|String|Number} date - the original date\n * @param {Object} [options] - the object with options\n * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek (dirtyDate, dirtyOptions) {\n  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0\n\n  var date = parse(dirtyDate)\n  var day = date.getDay()\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn\n\n  date.setDate(date.getDate() - diff)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n\nmodule.exports = startOfWeek\n","var getISOYear = require('../get_iso_year/index.js')\nvar startOfISOWeek = require('../start_of_iso_week/index.js')\n\n/**\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} date - the original date\n * @returns {Date} the start of an ISO year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * var result = startOfISOYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOYear (dirtyDate) {\n  var year = getISOYear(dirtyDate)\n  var fourthOfJanuary = new Date(0)\n  fourthOfJanuary.setFullYear(year, 0, 4)\n  fourthOfJanuary.setHours(0, 0, 0, 0)\n  var date = startOfISOWeek(fourthOfJanuary)\n  return date\n}\n\nmodule.exports = startOfISOYear\n","var isDate = require('../is_date/index.js')\n\n/**\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {Date} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} argument must be an instance of Date\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid (dirtyDate) {\n  if (isDate(dirtyDate)) {\n    return !isNaN(dirtyDate)\n  } else {\n    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')\n  }\n}\n\nmodule.exports = isValid\n","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')\nvar buildFormatLocale = require('./build_format_locale/index.js')\n\n/**\n * @category Locales\n * @summary English locale.\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n","function buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'less than a second',\n      other: 'less than {{count}} seconds'\n    },\n\n    xSeconds: {\n      one: '1 second',\n      other: '{{count}} seconds'\n    },\n\n    halfAMinute: 'half a minute',\n\n    lessThanXMinutes: {\n      one: 'less than a minute',\n      other: 'less than {{count}} minutes'\n    },\n\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n\n    aboutXHours: {\n      one: 'about 1 hour',\n      other: 'about {{count}} hours'\n    },\n\n    xHours: {\n      one: '1 hour',\n      other: '{{count}} hours'\n    },\n\n    xDays: {\n      one: '1 day',\n      other: '{{count}} days'\n    },\n\n    aboutXMonths: {\n      one: 'about 1 month',\n      other: 'about {{count}} months'\n    },\n\n    xMonths: {\n      one: '1 month',\n      other: '{{count}} months'\n    },\n\n    aboutXYears: {\n      one: 'about 1 year',\n      other: 'about {{count}} years'\n    },\n\n    xYears: {\n      one: '1 year',\n      other: '{{count}} years'\n    },\n\n    overXYears: {\n      one: 'over 1 year',\n      other: 'over {{count}} years'\n    },\n\n    almostXYears: {\n      one: 'almost 1 year',\n      other: 'almost {{count}} years'\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var result\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token]\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'in ' + result\n      } else {\n        return result + ' ago'\n      }\n    }\n\n    return result\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n","var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')\n\nfunction buildFormatLocale () {\n  // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  var meridiemUppercase = ['AM', 'PM']\n  var meridiemLowercase = ['am', 'pm']\n  var meridiemFull = ['a.m.', 'p.m.']\n\n  var formatters = {\n    // Month: Jan, Feb, ..., Dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: January, February, ..., December\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: Su, Mo, ..., Sa\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: Sun, Mon, ..., Sat\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: Sunday, Monday, ..., Saturday\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n    },\n\n    // am, pm\n    'a': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n    },\n\n    // a.m., p.m.\n    'aa': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]\n    }\n  }\n\n  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date))\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction ordinal (number) {\n  var rem100 = number % 100\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st'\n      case 2:\n        return number + 'nd'\n      case 3:\n        return number + 'rd'\n    }\n  }\n  return number + 'th'\n}\n\nmodule.exports = buildFormatLocale\n","var commonFormatterKeys = [\n  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',\n  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',\n  'H', 'HH', 'h', 'hh', 'm', 'mm',\n  's', 'ss', 'S', 'SS', 'SSS',\n  'Z', 'ZZ', 'X', 'x'\n]\n\nfunction buildFormattingTokensRegExp (formatters) {\n  var formatterKeys = []\n  for (var key in formatters) {\n    if (formatters.hasOwnProperty(key)) {\n      formatterKeys.push(key)\n    }\n  }\n\n  var formattingTokens = commonFormatterKeys\n    .concat(formatterKeys)\n    .sort()\n    .reverse()\n  var formattingTokensRegExp = new RegExp(\n    '(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'\n  )\n\n  return formattingTokensRegExp\n}\n\nmodule.exports = buildFormattingTokensRegExp\n"],"sourceRoot":""}